@page "/Articles/Manage"

@using Dul.Web
@using ArticleApp.Models
@using Dul.Domain.Common
@using ArticleApp.Pages.Articles.Components


@inject IArticleRepository ArticleRepository
@inject IJSRuntime JSRuntime

<h3>Manage</h3>

<div>
    <a href="/Articles/Create" class="btn btn-primary">Create</a>
</div>
<div>

</div>

@if (articles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead class="thead-light">
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Time</th>
                <th>&nbsp;</th>
                <th>isPinned</th>
                <th>&nbsp;</th>
                <th>&nbsp;</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>@article.Id</td>
                    <td>@article.Title</td>
                    <td>@article.Created.ToShortTimeString()</td>
                    <td>
                        <a href="/Articles/Details/@article.Id" class="btn btn-dark">Details</a>
                        <a href="/Articles/Edit/@article.Id" class="btn btn-dark">Edit</a>
                        <a href="/Articles/Delete/@article.Id" class="btn btn-danger">Delete</a>
                    </td>
                    <td>@(article.IsPinned ? "공지" : "")</td>
                    <td>
                        <input type="button" value="공지글로 올리기" class="btn btn-dark" @onclick="@(() => PinnedBy(article))" />
                    </td>
                    <td>
                        <input type="button" value="Delete" class="btn btn-secondary" data-toggle="modal" data-target="#articleEditDialog"
                               @onclick="(() => EditBy(article))" />
                    </td>

                    <td>
                        <input type="button" value="Delete" class="btn btn-danger" data-toggle="modal" data-target="#articleDeleteDialog"
                               @onclick="(() => DeleteBy(article))"/>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

<ArticlePager Model="pager" PageIndexChanged="PageIndexChaged"> </ArticlePager>
<ArticleDeleteDialog OnClick="btnDelete_Click"></ArticleDeleteDialog>



<ArticleEditorForm Model="@_article" SaveOrUpdated="SaveOrUpdated">
    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
</ArticleEditorForm>

@if (isShow == true)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">공지글로 올리기</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@(_article.Id)번을 공지글로 설정 할까요?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="btnTogglePinned_Click">설정</button>
                    <button type="button" class="btn btn-secondary" @onclick="btnClose_Click">닫기</button>
                </div>
            </div>
        </div>
    </div>
}
@code {

    private void SaveOrUpdated()
    {

    }

    private async void btnDelete_Click()
    {
        await ArticleRepository.DeleteArticleAsync(_article.Id); //삭제
        await JSRuntime.InvokeAsync<object>("closeModal", "articleDeleteDialog"); // _Host.cshtml
        _article = new Article(); //선택

        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        articles = pagingData.Records.ToList();

        StateHasChanged();

    }

    private Article _article = new Article(); // 선택한 항목 관리 /필드추가

    private bool isShow = false;

    private string editorFormTitle = "";

    private void EditBy(Article article)
    {
        editorFormTitle = "수정하기";
        _article = article;

    }

    private void DeleteBy(Article article)
    {
        _article = article;

    }


    private void PinnedBy(Article article)
    {
        _article = article;
        isShow = true;
        //JS.InvokeAsync<object>("alert", $"{article.Id}를 공지글로 설정 할까요?");
    }

    private void btnClose_Click()
    {
        isShow = false; // 창닫기
        _article = new Article(); // 선택했던 모델 초기화

    }

    private async void btnTogglePinned_Click()
    {
        _article.IsPinned = !_article.IsPinned; //토글기능 누를때마다 !로 바뀜
        await ArticleRepository.EditArticleAsync(_article);

        // 페이징처리된 데이터만 출력
        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; //총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드

        isShow = false; // moal close
        StateHasChanged();
    }


    private PagerBase pager = new PagerBase()
    {
        PageNumber = 1,
        PageIndex = 0,
        PageSize = 3,
        PagerButtonCount = 3
    };

    private List<Article> articles;

    protected override async Task OnInitializedAsync()
    {
        //전체 출력
        //페이지로드
        // articles = await ArticleRepository.GetArticlesAsync();

        // 페이징처리된 데이터만 출력
        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; //총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드

    }

    //PagerButton 콜백 메서드
    private async void PageIndexChaged(int pageIndex)
    {
        pager.PageIndex = pageIndex;
        pager.PageNumber = pageIndex + 1;

        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; //총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드

        StateHasChanged();// 현재 컴포넌트 재로드
    }
}
